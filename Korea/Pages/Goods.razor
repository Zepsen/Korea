@page "/category/{Id:int}" 
@using Korea.Shared.Models;
@using Korea.Core;
@using System.Linq;

@inherits Page
@inject HttpClient Http

<div class="row">
	@foreach (var good in goods.Data)
	{
		<div class="col-sm-12 col-md-6 col-lg-3 p-1">
			<div class="card shadow-sm">
				<img src="@good.Image" class="card-img-top" alt="@good.Title">
				<div class="card-body">
					<h5 class="card-title">@good.Title</h5>
					<p class="card-text">@good.Description</p>
					<h2><span class="badge badge-secondary">@good.Price</span></h2>
					<a href="@GetUrl(good.Id)" class="btn btn-outline-info">Go to @good.Id</a>
				</div>
			</div>
		</div>
	}

	
</div>
@goods.Total
@pagination.Page
<nav aria-label="Page navigation example">
	<ul class="pagination">
		<li class="page-item"><a class="page-link" @onclick="Prev">Previous</a></li>			
		<li class="page-item"><a class="page-link" @onclick="Next">Next</a></li>
	</ul>	
</nav>

@code 
{	
	[Parameter]
    public int Id { get; set; }

	private Pagination pagination = new Pagination();

	protected override void Breadcrumbs()
	{
		BasePage.AddBreadcrump(new List<Breadcrumb> 
		{ 
			new Breadcrumb { Name = "Categories", Route = "/" },
			new Breadcrumb { Name = Category.Crumb(Id), Active = true }
		});
	}
	
	protected Result<Good> goods = new Result<Good>();
	private async Task<Result<Good>> GetGoods(Pagination pagination)
	{
		var res = await Http.GetJsonAsync<List<Good>>("sample-data/goods.json");
			res = res.Where(i => i.CategoryId == Id).ToList();
		
		return new Result<Good> 
		{
			Data = res.Skip((pagination.Page - 1) * pagination.Take).Take(pagination.Take).ToList(),
			Total = res.Count
		};
	}

	protected override async Task OnInitializedAsync()
	{
		goods = await GetGoods(pagination);		
	}

	protected string GetUrl(int id) 
	{
		return $"good/{Id}/{id}";
	}

	protected async Task Prev()
	{
		if(pagination.Page > 1) 
		{
			pagination.Page--;
			goods = await GetGoods(pagination);
		}
	}

	protected async Task Next()
	{
		if(pagination.Page < goods.Total) 
		{
			pagination.Page++;
			goods = await GetGoods(pagination);
		}		
	}

}